1) sudo apt-get update
2) sudo apt-get install -y docker.io
3) sudo systemctl status docker (проверяем статус работы)
4) sudo systemctl start docker && sudo systemctl enable docker (если не запущен)
Далее нужно создать image и из него создать контейнер. Пример с maven и Dockerfile
5) Создать .jar maven-проекта
6) Создать Dockerfile (nano Dockerfile)
7) Инфа в Dockerfile
	FROM openjdk:8-jdk-alpine  
	ENV globalValue /home/fold
	ADD projectdb.jar projectdb.jar
	ENTRYPOINT ["java", "-jar", "projectdb.jar"]
8) FROM - образ, который берется за основу; ADD - добавление в образ; 
ENV - создание переменной среды; ENTRYPOINT - действие
9) docker build -t project .
создание образа с именем project. Команда выполняется непосредственно в папке с файлом jar
и Dockerfile
10) docker run -d -p 8080:8080 -v /home/admin/images:/home/fold --name projectdb projectdb
-d - все сделается без выводов логов в консоль
-p - проброска портов (host_port:cont_port)
-v - создание общей с контейнером директории (host_folder:cont_folder)
--name - выбор имени контейнера
<projectdb> в конце - выбор image для создания контейнера
ВСЁ!!!

доп команды:
docker ps (просмотр созданных и запущенных контейнеров)
docker ps -a (просмотр всех созданных контейнеров)
docker stop <cont_id> (остановка контейнера)
docker rm <cont_id> (удаление контейнера)
docker images (просмотр доступных образов)
docker rmi <name_image> (удаление выбранного образа. Удалится только если нет контейнеров,
созданных через этот образ)
docker exec -it <cont_id> /bin/sh (открытие консоли в контейнере)
docker attach <id_cont> (присоединение к контейнеру)


Dockerfile variables description:
**fundamental instructions
ARG //версия образа, который мы запуллим через FROM
FROM //образ (image), который мы используем в качестве базового для нашего контейнера
Example for fundamental instructions
ARG CODE_VERSION=16.04
FROM ubuntu:${CODE_VERSION}
RUN apt-get update -y
CMD ["bash"]
**configuration instructions
RUN //команды, которые требуется выполнить сразу после создания контейнера. К примеру, обновление системы, создание каталогов, установка библиотек
ADD | COPY
ENV //добавление переменных среды в формате {имя_перемнной:значение}
Example configuration instruction
FROM ubuntu:16.04
RUN apt-get update && apt-get install -y curl \
&& apt-get clean \
&& rm -rf /var/lib/apt/lists/*
RUN mkdir /home/Codes
ENV USER Cerulean-Canvas
ENV SHELL /bin/bash
ENV LOGNAME Cerulean-Canv
CMD ["bash"]
**execution instructions
CMD
ENTRYPOINTS
EXPOSE



**Search, List, Push, Pull
docker search python:3.6 //лист образов с ключевым словом python, которые отсортированы по "stars"
docker search --filter "is-official=true" registry //официальный образ
docker search --format "table {{.Name}}\t{{Description}}\t{{.IsOfficial}}" registry //только те колонки, которые мы введем

docker image ls
docker images //выведет все образы
docker images ubuntu //выведет все образы ubuntu
docker images ubuntu:16.04 //только образы ubuntu с версией 16.04
docker images --no-trunc ubuntu:16.04 //полная информация (полный id_image)

docker image pull nginx:latest //загрузка образа последней версии
docker image pull nginx:alpine //только для alpine (лучше, так как весит меньше)
docker image pull --all-tags nginx //загрузка всех версий для nginx

Docker for MySQL:

after pull image "mysql"
docker run \
-e MYSQL_ROOT_PASSWORD=mypassword \
-e MYSQL_DATABASE=Items \
-e MYSQL_USER=myuser \
-e MYSQL_PASSWORD=mypassword \
-d \
-p 40306:3306 \
--name mysql1 \
mysql

docker run \
-e MYSQL_ROOT_PASSWORD=mypassword \
-e MYSQL_DATABASE=Items \
-e MYSQL_USER=myuser \
-e MYSQL_PASSWORD=mypassword \
-d \
-p 50306:3306 \
-v /var/local/mysql:/var/lib/mysql \
--name mysql2 \
mysql

docker exec -it mysql1 bash

mysql -u root -p
mysql --version
show databases;
 
