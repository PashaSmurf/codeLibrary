по приколу
- если есть переход на новую строку, то символ ";" можно опустить (но не всегда)

1)Написание:
 - внутри html
<script>
	//твой код
</script>
 - отдельный файл js
<script src="путь к файлу"></script>
Если использовать и то, и то - приоритет будет подключенному файлу
2)Методы для помощи в отладке
- alert("что вывести"); //вызов модального окна. Прерывает дальнейшее выполнение кода
- console.log("что вывести"); //вывод в консоль
- prompt(title, [default]); //отобразит модальное окно с текстом, полем для ввода текста и кнопками OK/Отмена
- confirm(question); //Результат true, если нажата кнопка OK. В других случаях false	
3) комментарии
- //однострочные
- /*многострочные
комментарии*/
4) use strict; /*ставится в начале скрипта (можно только в методе),
приводит код в режим полного соответствия современному стандарту*/
5) переменная var
- Переменные var не имеют блочной области видимости, 
они ограничены, как минимум, телом функции.
- Объявления (инициализация) переменных var производится 
в начале исполнения функции (или скрипта для глобальных переменных), но присвоение нет.
6) ограничения в названии переменной
- Имя переменной должно содержать только буквы, цифры или символы $ и _
- Первый символ не должен быть цифрой
7) let – это современный способ объявления. (локальная)
Чтобы объявить константную, то есть, неизменяемую переменную, используйте const вместо let
8) явное преобразование типов
- let age = Number("123"); //123
- let str = String(1223); //"1223"
- alert(Boolean("0")); //true
В String преобразуется все
В Number нет. 
 - undefined	NaN
 - null	0
 - true / false	1 / 0
 -string	Пробельные символы по краям обрезаются. Далее, если остаётся пустая строка, 
то 0, иначе из непустой строки «считывается» число. При ошибке результат NaN.
В Boolean
0, null, undefined, NaN, ""	false
любое другое значение	true
9) Операторы и операнды
9 + 3 //9, 3 - операнды (то, к чему применяются операторы), "+" - оператор
Операторы бывают унарными (применяется к одному операнду) и бинарными (к двум операндам)
Интересные моменты:

унарный "+". Если операнд не число, то он его в него преобразует (тоже самое, что и явное привидение Number())
let y=-2; alert(+y); //-2 (не повлияло)
alert(+true); //1
alert(+""); //0

Возведение в степень
alert(2**3); //2 в степени 3

Алгоритм сравнения двух строк довольно прост:

Сначала сравниваются первые символы строк.
Если первый символ первой строки больше (меньше), чем первый символ второй, то первая строка больше (меньше) второй.
Если первые символы равны, то таким же образом сравниваются уже вторые символы строк.
Сравнение продолжается, пока не закончится одна из строк.
Если обе строки заканчиваются одновременно, то они равны. Иначе, большей считается более длинная строка.

Сравнение разных типов
При сравнении значений разных типов, JavaScript приводит каждое из них к числу.
alert( '2' > 1 ); // true, строка '2' становится числом 2
alert( '01' == 1 ); // true, строка '01' становится числом 1

Строгое сравнение
Использование обычного сравнения == может вызывать проблемы. Например, оно не отличает 0 от false
alert( 0 == false ); // true
Оператор строгого равенства === проверяет равенство без приведения типов.
alert( 0 === false ); // false, так как сравниваются разные типы

Сравнение с null и undefined
Поведение null и undefined при сравнении с другими значениями – особое
При строгом равенстве ===
Эти значения различны, так как различны их типы.
alert( null === undefined ); // false
При нестрогом равенстве ==
Эти значения равны друг другу и не равны никаким другим значениям. Это специальное правило языка.
alert( null == undefined ); // true

Несравнимое значение undefined
Значение undefined несравнимо с другими значениями:
alert( undefined > 0 ); // false (1)
alert( undefined < 0 ); // false (2)
alert( undefined == 0 ); // false (3)

10)Условия
Обычные if, else, else if, ?
if(условие){
//тело
}
else if{

}
else{

}
let res = условие ? значение1(если условие верно) : значение2(если условие ложно);
11) Логические операторы (||, &&, !)
- ||
alert( true || true );   // true
alert( false || true );  // true
alert( true || false );  // true
alert( false || false ); // false 
Также находит первое истинное значение или последнее, если все ложные
alert( null || 1 ); // 1 (первое истинное значение)
alert( null || 0 || 1 ); // 1 (первое истинное значение)
alert( undefined || null || 0 ); // 0 (поскольку все ложно, возвращается последнее значение)

- &&
alert( true && true );   // true
alert( false && true );  // false
alert( true && false );  // false
alert( false && false ); // false
Также находит первое ложное, если все истинные - возращает последнее
// Если первый операнд истинный,
// И возвращает второй:
alert( 1 && 0 ); // 0
alert( 1 && 5 ); // 5
// Если первый операнд ложный,
// И возвращает его. Второй операнд игнорируется
alert( null && 5 ); // null
alert( 0 && "no matter what" ); // 0

- !
Оператор принимает один аргумент и выполняет следующие действия:
1)Сначала приводит аргумент к логическому типу true/false.
2)Затем возвращает противоположное значение.

В частности, двойное НЕ используют для преобразования значений к логическому типу:
alert( !!"non-empty string" ); // true
alert( !!null ); // false

12) Циклы while, do-while, for, break, continue, метки, switch-case (все ясно)
13) функции 
function имя(параметры) {
//тело
}
пример
function showMessage(){
alert("asdasd);
}
вызов
showMessage();

Если параметр не указан, то его значением становится undefined
Результат функции с пустым return или без него – undefined

Существует ещё один синтаксис создания функций, который называется Function Expression (Функциональное Выражение)
let sayHi = function() {
  alert( "Привет" );
};

В коде выше функция создаётся и явно присваивается переменной, как любое другое значение. 
По сути без разницы, как мы определили функцию, это просто значение, хранимое в переменной sayHi.

Фукнции-"колбэки"
function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

function showOk() {
  alert( "Вы согласны." );
}

function showCancel() {
  alert( "Вы отменили выполнение." );
}

// использование: функции showOk, showCancel передаются в качестве аргументов ask
ask("Вы согласны?", showOk, showCancel);

Различия

sayHi("Вася"); // Привет, Вася

function sayHi(name) {
  alert( `Привет, ${name}` );
}
//////////
sayHi("Вася"); // ошибка!

let sayHi = function(name) {  // (*) магии больше нет
  alert( `Привет, ${name}` );
};

Функции-стрелки

let func = (arg1, arg2, ...argN) => expression

let sum = (a, b) => a + b;
alert( sum(1, 2) ); // 3

let sum = (a, b) => {  // фигурная скобка, открывающая тело многострочной функции
  let result = a + b;
  return result; // при фигурных скобках нужен return, чтобы вернуть результат
};
alert( sum(1, 2) ); // 3