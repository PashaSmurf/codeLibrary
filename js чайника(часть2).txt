1)Объекты
Создание пустого объекта
let user = new Object(); // синтаксис "конструктор объекта"
let user = {};  // синтаксис "литерал объекта"

Пример записи в объект
let user = {     // объект
  name: "John",  // под ключом "name" хранится значение "John"
  age: 30        // под ключом "age" хранится значение 30
};

Обращение
// получаем свойства объекта:
alert( user.name ); // John
alert( user.age ); // 30

Удаление свойства из объекта
delete user.age;

Имя свойства может состоять из нескольких слов, но тогда оно должно быть заключено в кавычки
let user = {
  name: "John",
  age: 30,
  "likes birds": true  // имя свойства из нескольких слов должно быть в кавычках
};
// присваивание значения свойству
user["likes birds"] = true;
// получение значения свойства
alert(user["likes birds"]); // true
// удаление свойства
delete user["likes birds"];

Проверка наличия свойства в объекте
let user = { name: "John", age: 30 };
alert( "age" in user ); // true, user.age существует
alert( "blabla" in user ); // false, user.blabla не существует

Цикл for..in
let user = {
  name: "John",
  age: 30,
  isAdmin: true
};
for (let key in user) {
  // ключи
  alert( key );  // name, age, isAdmin
  // значения ключей
  alert( user[key] ); // John, 30, true
}


Переменная хранит не сам объект, а его «адрес в памяти», другими словами «ссылку» на него.
Когда переменная объекта копируется – копируется ссылка, сам же объект не дублируется.

Клонирование объекта
Если принимающий объект (user) уже имеет свойство с таким именем, оно будет перезаписано
1 способ
let user = {
  name: "John",
  age: 30
};
let clone = {}; // новый пустой объект
// скопируем все свойства user в него
for (let key in user) {
  clone[key] = user[key];
}

2 способ
let clone = Object.assign({}, user);
или
// копируем все свойства из permissions1 и permissions2 в user
Object.assign(user, permissions1, permissions2);


Тип данных Symbol

// Создаём новый символ - id
let id = Symbol();

// Создаём символ id с описанием (именем) "id"
let id = Symbol("id");

//необходимо преобразовывать в строку явно. .toString()
let id = Symbol("id");
alert(id); // TypeError: Cannot convert a Symbol value to a string

Символы в литеральном объекте
Если мы хотим использовать символ при литеральном объявлении объекта {...}, 
его необходимо заключить в квадратные скобки.
let id = Symbol("id");
let user = {
  name: "Вася",
  [id]: 123 // просто "id: 123" не сработает
};

Свойства, чьи ключи – символы, не перебираются циклом for..in. Они просто не отображаются.
Может помочь только прямое обращение.
НО!!!!  Object.assign, в отличие от цикла for..in, копирует и строковые, и символьные свойства

Глобальные символы
Символы, содержащиеся в реестре, называются глобальными символами. 
// читаем символ из глобального реестра и записываем его в переменную
let id = Symbol.for("id"); // если символа не существует, он будет создан
// читаем его снова в другую переменную (возможно, из другого места кода)
let idAgain = Symbol.for("id");
// проверяем -- это один и тот же символ
alert( id === idAgain ); // true

Для глобальных символов, кроме Symbol.for(key), который ищет символ по имени, 
существует обратный метод: Symbol.keyFor(sym), который, наоборот, 
принимает глобальный символ и возвращает его имя.

Ключевое слово «this» в методах
Для доступа к информации внутри объекта метод может использовать ключевое слово this.
let user = {
  name: "Джон",
  age: 30,

  sayHi() {
    // this - это "текущий объект"
    alert(this.name);
  }

};
user.sayHi(); // Джон